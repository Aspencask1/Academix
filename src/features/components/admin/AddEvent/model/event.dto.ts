// src/features/components/admin/AddEvent/model/event.dto.ts

/**
 * @interface EventDTO
 * @description Defines the structure of an Event object as returned by the backend.
 * This should include its ID and potentially a URL for the uploaded image.
 */
export interface EventDTO {
  id: string; // Event ID, typically generated by the backend
  title: string;
  description: string;
  date: string; // Consider using Date type or specific date string format (e.g., 'YYYY-MM-DD')
  time: string; // Consider using specific time string format (e.g., 'HH:MM')
  location: string;
  category: string; // e.g., 'conference', 'webinar', 'workshop'
  maxAttendees: number;
  eventUrl: string;
  imageUrl?: string; // URL where the event image is hosted (returned by backend)
  createdAt?: string; // Optional: timestamp for when the event was created
  updatedAt?: string; // Optional: timestamp for when the event was last updated
}

/**
 * @interface CreateEventDTO
 * @description Defines the structure of the data sent to the backend when creating a new event.
 * It omits the 'id' and 'imageUrl' (as the image itself is sent via FormData).
 */
export type CreateEventDTO = Omit<EventDTO, 'id' | 'imageUrl' | 'createdAt' | 'updatedAt'>;

/**
 * @interface FetchEventsQueryDTO
 * @description Defines the structure of query parameters for fetching a list of events.
 * Similar to courses, you might use limit and cursor for pagination.
 */
export interface FetchEventsQueryDTO {
  limit: number;
  cursor: string | null;
}

/**
 * @interface FetchEventsResponseDTO
 * @description Defines the structure of the response when fetching a list of events,
 * including pagination metadata.
 */
export interface FetchEventsResponseDTO {
  events: EventDTO[];
  nextCursor: string | null;
  hasMore: boolean;
}
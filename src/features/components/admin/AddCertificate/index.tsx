// src/features/components/admin/AddCertificate/index.tsx
import React, { useState, useEffect } from 'react';
import { addCertificateStyles } from './styles.component';
import { useAllCertificatesForAdminQuery } from 'entities/query/certificates/get-all-certificates-for-admin.query';
import { useForm, Controller } from 'react-hook-form';
import { certificateSchema, type CertificateSchema } from 'features/schema/certificate.schema';
import { yupResolver } from '@hookform/resolvers/yup';
import {
  useCreateCertificateMutation,
  useDeleteCertificateMutation,
} from 'entities/mutation';
import {
  TextField,
  Button,
  Box,
  Typography,
  Paper,
  IconButton,
  Alert,
  CircularProgress,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  TablePagination,
  InputAdornment,
  Switch,
  ToggleButtonGroup,
  ToggleButton,
} from '@mui/material';
import { CloudUpload, Delete, Close, Visibility, Search, TableRows, GridView, PictureAsPdf } from '@mui/icons-material';
import type { Certificate } from 'entities/model/certificate.model';
import { CertificateDetailModal } from 'entities/component/CertificateDetailModal';
import { ConfirmDialog } from 'entities/component/ConfirmDialog';
import { useSnackBar } from 'entities/state';

interface AddCertificateProps {}

export const AddCertificate: React.FC<AddCertificateProps> = () => {
  const [pdfFile, setPdfFile] = useState<File | null>(null);
  const [previewPdfName, setPreviewPdfName] = useState<string | null>(null);

  const [currentView, setCurrentView] = useState<'table' | 'grid'>(() => {
    return (localStorage.getItem('certificateView') as 'table' | 'grid') || 'table';
  });

  const [modalOpen, setModalOpen] = useState(false);
  const [selectedCertificate, setSelectedCertificate] = useState<Certificate | null>(null);

  const [deleteConfirmOpen, setDeleteConfirmOpen] = useState(false);
  const [certificateToDeleteKey, setCertificateToDeleteKey] = useState<string | null>(null);

  const [page, setPage] = useState(0);
  const [rowsPerPage, setRowsPerPage] = useState(10);
  const [searchQuery, setSearchQuery] = useState('');
  const [debouncedSearchQuery, setDebouncedSearchQuery] = useState('');

  const {
    data: certificatesData,
    isLoading: isLoadingCertificates,
    isError: isErrorCertificates,
    error: certificatesError,
    refetch: refetchCertificates,
  } = useAllCertificatesForAdminQuery({ page: page + 1, limit: rowsPerPage, search: debouncedSearchQuery });

  const createCertificateMutation = useCreateCertificateMutation();
  const deleteCertificateMutation = useDeleteCertificateMutation();

  const { show: showSnackbar } = useSnackBar();

  const {
    handleSubmit,
    control,
    reset,
    setValue,
    formState: { errors, isSubmitting },
  } = useForm<CertificateSchema>({
    resolver: yupResolver(certificateSchema),
    defaultValues: {
      // Removed 'key' from defaultValues as it's no longer a form field for creation
      certificatePdf: undefined,
    },
  });

  useEffect(() => {
    const timer = setTimeout(() => {
      setDebouncedSearchQuery(searchQuery);
    }, 500);
    return () => clearTimeout(timer);
  }, [searchQuery]);

  useEffect(() => {
    // Reset form and PDF preview
    reset();
    setPreviewPdfName(null);
    setPdfFile(null);
    // Explicitly clear form field value
    setValue('certificatePdf', undefined);
  }, [reset, setValue]);


  useEffect(() => {
    localStorage.setItem('certificateView', currentView);
  }, [currentView]);

  const handlePdfChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      const file = e.target.files[0];
      setPdfFile(file);
      setPreviewPdfName(file.name);
      setValue('certificatePdf', file); // Set the file object to form value for validation
    } else {
      setPdfFile(null);
      setPreviewPdfName(null);
      setValue('certificatePdf', undefined); // Clear the form value
    }
  };

  const onSubmit = async (data: CertificateSchema) => {
    if (!pdfFile) {
      showSnackbar({
        title: 'Please select a PDF file for the certificate.',
        color: 'error',
      });
      return;
    }
    // Only send the pdfFile, as the key is now generated by the backend
    await createCertificateMutation.mutateAsync({
      pdfFile: pdfFile,
    });
    reset();
    setPdfFile(null);
    setPreviewPdfName(null);
    setValue('certificatePdf', undefined); // Ensure form value is cleared
    refetchCertificates();
  };

  const handleViewCertificate = (certificate: Certificate) => {
    setSelectedCertificate(certificate);
    setModalOpen(true);
  };

  const handleDeleteCertificateClick = (certificateKey: string) => { // Changed parameter name
    setCertificateToDeleteKey(certificateKey);
    setDeleteConfirmOpen(true);
  };

  const handleDeleteConfirm = async () => {
    if (certificateToDeleteKey) {
      await deleteCertificateMutation.mutateAsync(certificateToDeleteKey); // Changed argument
      setDeleteConfirmOpen(false);
      setCertificateToDeleteKey(null);
      refetchCertificates();
    }
  };

  const handleCancelDelete = () => {
    setDeleteConfirmOpen(false);
    setCertificateToDeleteKey(null);
  };

  const handleChangePage = (event: unknown, newPage: number) => {
    setPage(newPage);
  };

  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {
    setRowsPerPage(parseInt(event.target.value, 10));
    setPage(0);
  };

  const toggleView = (event: React.MouseEvent<HTMLElement>, newView: 'table' | 'grid' | null) => {
    if (newView !== null) {
      setCurrentView(newView);
    }
  };

  const certificates = certificatesData?.data?.certificates || [];
  const totalCertificates = certificatesData?.total || 0;
  // const totalPages = certificatesData?.totalPages || 1; // Not used with MUI pagination


  return (
    <Box sx={addCertificateStyles.container}>
      <Typography variant="h4" component="h1" sx={addCertificateStyles.header}>
        Add New Certificate
      </Typography>

      {createCertificateMutation.isError && (
        <Alert severity="error" sx={addCertificateStyles.alert}>
          {createCertificateMutation.error?.response?.data?.message || 'Failed to create certificate.'}
        </Alert>
      )}
      {deleteCertificateMutation.isError && (
        <Alert severity="error" sx={addCertificateStyles.alert}>
          {deleteCertificateMutation.error?.response?.data?.message || 'Failed to delete certificate.'}
        </Alert>
      )}

      {createCertificateMutation.isSuccess && (
        <Alert severity="success" sx={addCertificateStyles.alert}>
          {createCertificateMutation.data?.message || 'Certificate created successfully!'}
        </Alert>
      )}
      {deleteCertificateMutation.isSuccess && (
        <Alert severity="success" sx={addCertificateStyles.alert}>
          {deleteCertificateMutation.data?.message || 'Certificate deleted successfully!'}
        </Alert>
      )}

      <Paper elevation={3} sx={addCertificateStyles.formContainer}>
        <form onSubmit={handleSubmit(onSubmit)}>
          {/* Removed TextField for 'key' as it's generated by the backend */}
          {/* <Controller
            name="key"
            control={control}
            render={({ field }) => (
              <TextField
                {...field}
                label="Certificate Key"
                variant="outlined"
                fullWidth
                sx={addCertificateStyles.inputField}
                error={!!errors.key}
                helperText={errors.key?.message}
              />
            )}
          /> */}

          <Box sx={addCertificateStyles.pdfUploadContainer}>
            <input
              accept="application/pdf"
              style={{ display: 'none' }}
              id="certificate-pdf-upload"
              type="file"
              onChange={handlePdfChange}
            />
            <label htmlFor="certificate-pdf-upload">
              <Button
                variant="outlined"
                component="span"
                startIcon={<CloudUpload />}
                sx={addCertificateStyles.uploadButton}
              >
                Upload PDF
              </Button>
            </label>
            {previewPdfName && (
              <Box sx={addCertificateStyles.pdfPreviewBox}>
                <PictureAsPdf sx={addCertificateStyles.pdfIcon} />
                <Typography variant="body2">{previewPdfName}</Typography>
                <IconButton
                  onClick={() => {
                    setPreviewPdfName(null);
                    setPdfFile(null);
                    setValue('certificatePdf', undefined);
                  }}
                  sx={addCertificateStyles.removePdfButton}
                >
                  <Close />
                </IconButton>
              </Box>
            )}
            {errors.certificatePdf && (
              <Typography color="error" variant="caption" sx={{ mt: 1 }}>
                {errors.certificatePdf.message as string}
              </Typography>
            )}
          </Box>

          <Button
            type="submit"
            variant="contained"
            color="primary"
            sx={addCertificateStyles.submitButton}
            disabled={isSubmitting || createCertificateMutation.isPending}
          >
            {isSubmitting || createCertificateMutation.isPending ? (
              <CircularProgress size={24} color="inherit" />
            ) : (
              'Create Certificate'
            )}
          </Button>
        </form>
      </Paper>

      <Box sx={{ mt: 4 }}>
        <Typography variant="h5" component="h2" sx={addCertificateStyles.subHeader}>
          Existing Certificates
        </Typography>

        <Box sx={addCertificateStyles.searchAndSwitchContainer}>
          <TextField
            label="Search by Key"
            variant="outlined"
            size="small"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            InputProps={{
              startAdornment: (
                <InputAdornment position="start">
                  <Search />
                </InputAdornment>
              ),
            }}
            sx={addCertificateStyles.searchField}
          />
          <ToggleButtonGroup
            value={currentView}
            exclusive
            onChange={toggleView}
            aria-label="certificate view"
            sx={addCertificateStyles.viewToggle}
          >
            <ToggleButton value="table" aria-label="table view">
              <TableRows />
            </ToggleButton>
            <ToggleButton value="grid" aria-label="grid view">
              <GridView />
            </ToggleButton>
          </ToggleButtonGroup>
        </Box>

        {isLoadingCertificates ? (
          <Box sx={addCertificateStyles.loadingBox}>
            <CircularProgress />
          </Box>
        ) : isErrorCertificates ? (
          <Alert severity="error" sx={addCertificateStyles.alert}>Error loading certificates: {certificatesError?.message}</Alert>
        ) : certificates.length === 0 ? (
          <Alert severity="info" sx={addCertificateStyles.alert}>No certificates found.</Alert>
        ) : (
          <>
            {currentView === 'table' ? (
              <TableContainer component={Paper} sx={addCertificateStyles.tableContainer}>
                <Table>
                  <TableHead>
                    <TableRow>
                      <TableCell sx={addCertificateStyles.tableHeader}>Key</TableCell>
                      <TableCell sx={addCertificateStyles.tableHeader}>PDF</TableCell>
                      <TableCell sx={addCertificateStyles.tableHeader}>Uploaded By</TableCell>
                      <TableCell sx={addCertificateStyles.tableHeader}>Status</TableCell>
                      <TableCell sx={addCertificateStyles.tableHeader} align="right">
                        Actions
                      </TableCell>
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {certificates.map((certificate) => (
                      <TableRow key={certificate._id} sx={addCertificateStyles.tableRow}>
                        <TableCell sx={addCertificateStyles.tableCell}>{certificate.certificateKey}</TableCell> {/* Used certificateKey */}
                        <TableCell sx={addCertificateStyles.tableCell}>
                          <a href={certificate.pdfUrl} target="_blank" rel="noopener noreferrer" style={{ display: 'flex', alignItems: 'center', gap: '0.5rem', wordBreak: 'break-all' }}> {/* Used pdfUrl */}
                            <PictureAsPdf sx={addCertificateStyles.tablePdfIcon} />
                            View PDF
                          </a>
                        </TableCell>
                        <TableCell sx={addCertificateStyles.tableCell}>
                          {certificate.uploadedBy && typeof certificate.uploadedBy === 'object'
                            ? (certificate.uploadedBy as any).name
                            : 'N/A'}
                        </TableCell>
                        <TableCell sx={addCertificateStyles.tableCell}>
                          <Switch
                            checked={certificate.isActive}
                            inputProps={{ 'aria-label': 'certificate active status' }}
                            disabled // Disabled as backend only offers softDelete, not generic isActive toggle
                          />
                          {certificate.isActive ? 'Active' : 'Inactive'}
                        </TableCell>
                        <TableCell align="right" sx={addCertificateStyles.tableCell}>
                          <Box sx={addCertificateStyles.tableActions}>
                            <IconButton
                              size="small"
                              onClick={() => handleViewCertificate(certificate)}
                              aria-label="view certificate"
                            >
                              <Visibility fontSize="small" />
                            </IconButton>
                            <IconButton
                              size="small"
                              onClick={() => handleDeleteCertificateClick(certificate.certificateKey)} // Used certificateKey
                              aria-label="delete certificate"
                              disabled={deleteCertificateMutation.isPending || !certificate.isActive} // Can only soft-delete if active
                            >
                              <Delete fontSize="small" />
                            </IconButton>
                          </Box>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
                <TablePagination
                  rowsPerPageOptions={[5, 10, 25]}
                  component="div"
                  count={totalCertificates}
                  rowsPerPage={rowsPerPage}
                  page={page}
                  onPageChange={handleChangePage}
                  onRowsPerPageChange={handleChangeRowsPerPage}
                />
              </TableContainer>
            ) : (
              <Box sx={addCertificateStyles.paginationContainer}>
                <Box sx={addCertificateStyles.certificateGrid}>
                  {certificates.map((certificate) => (
                    <Paper key={certificate._id} elevation={2} sx={addCertificateStyles.certificateCard}>
                      <Box sx={addCertificateStyles.certificateCardContent}>
                        <PictureAsPdf sx={{ fontSize: '3rem', color: '#dc2626', mb: 1 }} />
                        <Typography variant="h6" sx={addCertificateStyles.certificateCardTitle}>
                          Key: {certificate.certificateKey} {/* Used certificateKey */}
                        </Typography>
                        <Typography variant="body2" color="text.secondary">
                          Uploaded By: {certificate.uploadedBy && typeof certificate.uploadedBy === 'object'
                            ? (certificate.uploadedBy as any).name
                            : 'N/A'}
                        </Typography>
                        <Typography variant="body2" color="text.secondary">
                          Status: {certificate.isActive ? 'Active' : 'Inactive'}
                        </Typography>
                        <Box sx={addCertificateStyles.certificateCardActions}>
                          <Button
                            variant="outlined"
                            size="small"
                            startIcon={<Visibility fontSize="small" />}
                            onClick={() => handleViewCertificate(certificate)}
                          >
                            View
                          </Button>
                          <Button
                            variant="outlined"
                            color="error"
                            size="small"
                            startIcon={<Delete fontSize="small" />}
                            onClick={() => handleDeleteCertificateClick(certificate.certificateKey)} // Used certificateKey
                            disabled={deleteCertificateMutation.isPending || !certificate.isActive}
                          >
                            Delete
                          </Button>
                        </Box>
                      </Box>
                    </Paper>
                  ))}
                </Box>
                <TablePagination
                  rowsPerPageOptions={[5, 10, 25]}
                  component="div"
                  count={totalCertificates}
                  rowsPerPage={rowsPerPage}
                  page={page}
                  onPageChange={handleChangePage}
                  onRowsPerPageChange={handleChangeRowsPerPage}
                />
              </Box>
            )}
          </>
        )}
      </Box>

      <CertificateDetailModal
        open={modalOpen}
        onClose={() => setModalOpen(false)}
        certificate={selectedCertificate}
        loading={false}
      />

      <ConfirmDialog
        open={deleteConfirmOpen}
        onClose={handleCancelDelete}
        onConfirm={handleDeleteConfirm}
        title="Confirm Deletion"
        description="Are you sure you want to soft-delete this certificate? It will become inactive."
        loading={deleteCertificateMutation.isPending}
      />
    </Box>
  );
};

